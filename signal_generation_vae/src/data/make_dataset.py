"""
Description:
This file contain a python module to reconstruct a database starting from a 
http://openguidedwaves.de/downloads/, specifically the work done by Moll, Kexel, PÃ¶tzsch,
Rennoch, Herrmann, A. S.: Temperature affected guided wave propagation 
in a composite plate complementing the Open Guided Waves Platform, Scientific Data, 
2019, 6:191 with relative DOI: 10.1038/s41597-019-0208-1

Author: Miele Lorenzo, Lomazzi Luca

Use: you can modify this function to create a database starting from a folder from 
open guided waves
"""
import os
import re
import pickle
import numpy as np
import h5py

# number of sampling frequencies
FREQ_DIM = 12

def create_database(dir_path):
    """generate a database starting from a folder which contains subfolder
    which contain hdf5 files
    Args:
        dir_path (string): path of the desired folder

    Returns:
        database: list of dictionaries with name, frequency, temperature and samples
    """
    database = []
    counter = 0
    freq = np.arange(40, 261, 20) # The frequency used are 40, 60, 80 ,..., 260
    # Creating a vector to map the frequency used
    freq_str = [str(f) for f in freq]
    for root, _, files in os.walk(dir_path):
        for file in files:
            file_path = os.path.join(root, file)
            print(f"File: {file_path}")
            # Looking for a specific frequency
            for f in freq_str:
                if re.search(fr'f{f}', file):
                    print(file, f)
                    new_sample = create_dict(file_path, int(f), counter//(len(freq))+1)
                    database.append(new_sample)
                    counter += 1

    return database

def create_dict (file_arg, frequency, counter):
    """Function that create a dictionary starting from a open
    guided wave hdf5 file type.
    Args:
        file_arg (hdf5): file containing the dataset of samples generated by
            12 actuators and 12 sensors in different positions.
    Returns:
        sample (dict): database updated with the new file data
            with keys: name, frequency, temperature, catch.
    example:
        signal = create_dict('pc_f40kHz.h5', 40, 1)
        signal["name"] -> 1f40
        signal["temperature"] -> [20.2, 20.4]
    """
    with h5py.File(file_arg, 'r') as h5_file:
        x = np.array(h5_file['pitchcatch']['catch'])
        name = str(counter) + 'f' + str(frequency)
        temperature = np.array(h5_file['Temperature']['values'])
        dict_sample = {
            "name": name,
            "frequency":frequency,
            "temperature": temperature,
            "catch": x
        }
    return dict_sample

DIRECTORY_PATH = "OGW_CFRP_Temperature_udam"

my_db = create_database(DIRECTORY_PATH)
# names = [dict_db["name"] for dict_db in my_db if "name" in dict_db]
# print(names)

# Create a database to have the frequency ordered
ordered_db = []
for i in range(FREQ_DIM):
    ordered_db.extend(my_db[i::FREQ_DIM])

# names = [dict_db["name"] for dict_db in ordered_db if "name" in dict_db]
# print(names)

with open('database.pkl', 'wb') as file:
    pickle.dump(ordered_db, file)