"""
Description:
This Python module creates a database from Open Guided Waves dataset, 
specifically the work done by Moll, Kexel, PÃ¶tzsch, Rennoch, Herrmann, 
A. S.: Temperature-affected guided wave propagation in a composite plate, 
complementing the Open Guided Waves Platform, Scientific Data,
2019, 6:191 with relative DOI: 10.1038/s41597-019-0208-1.

Authors: Lorenzo Miele, Luca Lomazzi

Usage: You can modify this function to create a database starting from a 
folder from Open Guided Waves. (the README will explain the procedure)

Requirements:
- numpy
- h5py

Script Execution:
1. Define the path to the data folder if not as default raw (DATA_PATH).
2. Define the path for the output database file if not as default interim (OUTPUT_PATH).
3. Execute the script.

The script will print information about the files being processed and create a 
database.pkl file in the specified output path.

Note: The execution of the pickle load might take a few minutes since the 
dataset is very large.
"""
import os
import re
import pickle
import numpy as np
import h5py

# number of sampling frequencies
FREQ_DIM = 12

def create_database(dir_path):
    """generate a database starting from a folder which contains subfolder
    which contain hdf5 files
    Args:
        dir_path (string): path of the desired folder

    Returns:
        database: list of dictionaries with name, frequency, temperature and samples
    
    Raises:
        FileNotFoundError: If the specified data folder does not exist.
    
    """
    if not os.path.exists(input_path):
        raise FileNotFoundError(f"The specified data folder does not exist: {input_path}")
    database = []
    counter = 0
    freq = np.arange(40, 261, 20) # The frequency used are 40, 60, 80 ,..., 260
    # Creating a vector to map the frequency used
    freq_str = [str(f) for f in freq]
    for root, _, files in os.walk(dir_path):
        for file in files:
            file_path = os.path.join(root, file)
            print(f"File: {file_path}")
            # Looking for a specific frequency
            for f in freq_str:
                if re.search(fr'f{f}', file):
                    print(file, f)
                    new_sample = create_dict(file_path, int(f), counter//(len(freq))+1)
                    database.append(new_sample)
                    counter += 1

    return database

def create_dict (file_arg, frequency, counter):
    """Function that create a dictionary starting from a open
    guided wave hdf5 file type.
    Args:
        file_arg (hdf5): file containing the dataset of samples generated by
            12 actuators and 12 sensors in different positions.
    Returns:
        sample (dict): database updated with the new file data
            with keys: name, frequency, temperature, catch.
    example:
        signal = create_dict('pc_f40kHz.h5', 40, 1)
        signal["name"] -> 1f40
        signal["temperature"] -> [20.2, 20.4]
    """
    with h5py.File(file_arg, 'r') as h5_file:
        x = np.array(h5_file['pitchcatch']['catch'])
        name = str(counter) + 'f' + str(frequency)
        temperature = np.array(h5_file['Temperature']['values'])
        dict_sample = {
            "name": name,
            "frequency":frequency,
            "temperature": temperature,
            "catch": x
        }
    return dict_sample

# START: data/raw
# END:   data/interim
file_Path = os.path.abspath(__file__)
DATA_PATH = r"..\..\..\data\raw\OGW_CFRP_Temperature_udam"
OUTPUT_PATH = r"..\..\..\data\interim\database.pkl"
input_path = os.path.abspath(os.path.join(file_Path, DATA_PATH))
output_path = os.path.abspath(os.path.join(file_Path, OUTPUT_PATH))

my_db = create_database(input_path)
# names = [dict_db["name"] for dict_db in my_db if "name" in dict_db]
# print(names)

# Create a database to have the frequency ordered
ordered_db = []
for i in range(FREQ_DIM):
    ordered_db.extend(my_db[i::FREQ_DIM])

# names = [dict_db["name"] for dict_db in ordered_db if "name" in dict_db]
# print(names)

print("Output Path:", output_path)

if os.path.exists(output_path):
    print("The file already exist. Removing...")
    os.remove(output_path)

print("Creating the file database.pkl (it will take a few minutes)")

with open(output_path, 'wb') as file:
    pickle.dump(ordered_db, file)
